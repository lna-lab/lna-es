"""
reconstruct_text.py
====================

This script reconstructs the original manuscript from a Cypher graph file
generated by `create_graph.py`.  It parses `CREATE` statements for nodes
labelled `Sentence`, extracts the `id` and `text` properties, orders
sentences by their `id`, and concatenates them to produce the reconstructed
text.  The result should be semantically identical to the original
manuscript.

Usage:
    python reconstruct_text.py --input graph.cypher --output reconstructed.txt

If no output path is provided, the reconstructed text will be printed to
stdout.
"""

import argparse
import re
from typing import Dict


def parse_cypher(path: str) -> Dict[int, str]:
    """
    Parse a Cypher file generated by create_graph.py and return a mapping
    from sentence ID to sentence text.  Only lines that define Sentence
    nodes are considered.
    """
    pattern = re.compile(r"CREATE \(s(?P<id>\d+):Sentence \{.*?text: '(?P<text>.*?)'.*?\}\);")
    sentences: Dict[int, str] = {}
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            match = pattern.match(line)
            if match:
                idx = int(match.group("id"))
                text = match.group("text").replace("''", "'")
                sentences[idx] = text
    return sentences


def reconstruct_text(sentences: Dict[int, str]) -> str:
    """
    Reconstruct the original text by concatenating sentence texts in order.
    """
    reconstructed = "".join(sentences[i] for i in sorted(sentences.keys()))
    return reconstructed


def main() -> None:
    parser = argparse.ArgumentParser(description="Reconstruct original text from a Cypher graph.")
    parser.add_argument("--input", required=True, help="Path to the input Cypher file.")
    parser.add_argument("--output", help="Optional path to write the reconstructed text. If omitted, prints to stdout.")
    args = parser.parse_args()

    sentences = parse_cypher(args.input)
    if not sentences:
        raise SystemExit("No sentences were found in the Cypher file.")

    text = reconstruct_text(sentences)
    if args.output:
        with open(args.output, "w", encoding="utf-8") as f:
            f.write(text)
        print(f"Reconstructed text written to {args.output}")
    else:
        print(text)


if __name__ == "__main__":
    main()